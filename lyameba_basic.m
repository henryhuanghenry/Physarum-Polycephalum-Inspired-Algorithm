%% lyameba_basic.m
% Execute with function findspin_PPA.m and the main file create_graph.m
%% Read the papers 
%DOI:10.1126/science.1177894 and http://dx.doi.org/10.1155/2014/487069 --
%for your better understanding to this program 
%-------------------------------------Introduction--------------------------------------------------------
%Author: Yusheng Huang (Created Date: 10.24 2020)
%This file is the reproduction of the PPA algorithm.
%(Originally proposed by Atsushi Tero  et al. DOI:10.1126/science.1177894)
%This function is the reproduction of the originally PPA algorithm.
%Some details are also inspired by the article http://dx.doi.org/10.1155/2014/487069.
%See the DOI:10.1126/science.1177894 or
%http://dx.doi.org/10.1155/2014/487069 for more details.
%----------------------------------------------------------------------------------------------------------
% --------------Some important variables-----------------------------------
%Q: the flow matrix which is of the same size as the matrix_graph
%D: the conductivity matrix which is of the same size as the matrix_graph
%ite: number of iterations
%nodelist: the shortest path  
%-------------------------------------------------------------------------
function [Q,D,ite,time,length_shortestpath,nodelist]= lyameba_basic(matrix_graph,Node_start,Node_end)
%% single source single sink
tic;%time
%%initialization
n=length(matrix_graph(:,1));% n:number of nodes
matrix_graph(matrix_graph==0)=inf;% if two nodes are not connected, set the distance to infinite
D=0.5*ones(n);%initialize the conductivity 
D=D-diag(diag(D));
temp_D=zeros(n);% for termination criterion
ite=0;% for iteration counting
A=zeros(n,1);% for liner equation solving:in MATLAB,if BX=A, then X=B\A.  
A(Node_start)=1; % the inflow of the graph 
A(Node_end)=-1; % the outflow of the graph 
%% Main loop of the PPA
while sum(sum(abs(temp_D-D)))>0.0001 %termination criterion
    %% obtain the coefficient matrix according to the PPA algorithm
    B=D./matrix_graph;
    B=diag(sum(B))-B; % the coefficient of pi
    B(:,Node_end)=[];
    % solving the Network Poisson equation to obtain the pressure of node Pi
    P=B\A;%P contains Pi(i=1,...n,ÇÒi~=Node_end) isrr Network Poisson equation 
    % there are only n-1 Pi in Pbecause Pi(i=Node_end) is set to zero
    %% thus, we obtain P(i=1,...n) by inserting the Pi(i=Node_end)=0 into P
    if Node_end<n&& Node_end>1
        P=[P(1:Node_end-1);0;P(Node_end:end)];
    elseif Node_end==n
        P=[P;0];
    else
        P=[0;P];
    end
    %%  calculate Q using pi
    tempP=repmat(P,1,n)-repmat(P',n,1);%tempP=pi-pj
    Q=(D./matrix_graph).*tempP;%calculate Q
    Q=abs(Q);
    temp_D=D;%for termination criterion 
    D=(Q+D)./2;% adaptation equation 
    ite=ite+1;
end
%% Call the findspin_PPA to find the shortest path from a flow matrix generated by the originally PPA
[length_shortestpath,nodelist]=findspin_PPA(Node_start,Node_end,Q,matrix_graph);

time=toc;
end
