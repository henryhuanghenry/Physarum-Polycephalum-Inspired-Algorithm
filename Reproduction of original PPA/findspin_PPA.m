%% findspin_PPA
% Execute with function lyameba_basic.m and the main file create_graph.m
%-------------------------------------Introduction--------------------------------------------------------
%Author: Yusheng Huang (Created Date: 10.24 2020)
%Use this file to find the shortest path from a flow matrix generated by --
%the original PPA.
% 1. Start from the starting node, find the edge having the maximum amount
% of flow among its edges. This edge is part of the shortest path. Jump to another node of this edge.
% 2.Find the edge having the maximum amount of flow among this node's edges.(Do not find back to last node.) 
% This edge is part of the shortest path. Jump to another node of this edge.
% 3.Repeat 2 until jump to the ending nodes.
%The time complexity of this function is O(m) in the worst case.
%----------------------------------------------------------------------------------------------------------
% --------------Some important variables-----------------------------------
%Q0:input the flow matrix generated by the original PPA which is of the same--
%size of the matrix_graph
%sum_SP: the length of the shortest path 
%nodelist: the shortest path  
%-------------------------------------------------------------------------
function [sum_SP,nodelist]=findspin_PPA(Node_start,Node_end,Q0,matrix_graph)
% input:Node_start Node_end  Q0  matrix_graph 
% output: sum_SP,nodelist
graph_flux=Q0;% The copy of the flow matrix. Operating on it.
nodelist=Node_start; %保存的最短路径链路 可以调用输出
endnode=1;%the pointer of the next node of the edge
sum_SP=0;
%% 寻找最短路径
%find(graph_flux(:,nodelist(endnode-1))==max(graph_flux(:,nodelist(endnode-1)))) means that: 
%Given the previous node i of the shortest path, the j with the largest Qij is the next node of the shortest path.
while nodelist(endnode)~=Node_end
    graph_flux(nodelist(endnode),:)=0;% delete the node and the corresponding links that have already been traversed
    endnode=endnode+1;
    node_tmp=find(graph_flux(:,nodelist(endnode-1))==max(graph_flux(:,nodelist(endnode-1))));%find the next node of the shortest path
    nodelist=[nodelist;node_tmp];%store the node of the shortest path 
    sum_SP=sum_SP+matrix_graph(nodelist(endnode-1),nodelist(endnode));%calculate the shortest path
    if isnan(Q0(nodelist(endnode-1),nodelist(endnode))) || isnan(Q0(nodelist(endnode-1),Node_end))  %output NaN if unexpected situation occur
        sum_SP=NaN;
        break;
    end
end
end